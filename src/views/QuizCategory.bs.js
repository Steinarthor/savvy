// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as $$String from "bs-platform/lib/es6/string.js";
import * as Input$Savvy from "../components/Input/Input.bs.js";
import * as Button$Savvy from "../components/Button/Button.bs.js";
import * as Select$Savvy from "../components/Select/Select.bs.js";
import * as APIDecode$Savvy from "../apiDecode/APIDecode.bs.js";
import * as Questions$Savvy from "../components/Questions/Questions.bs.js";
import * as MakeStream$Savvy from "../utils/MakeStream.bs.js";
import * as QuizContext$Savvy from "../context/QuizContext.bs.js";

function QuizCategory(Props) {
  var title = Props.title;
  var categoryId = Props.categoryId;
  var match = React.useState((function () {
          return 1;
        }));
  var setNumberOfQuestions = match[1];
  var numberOfQuestions = match[0];
  var match$1 = React.useState((function () {
          return /* array */[];
        }));
  var setQuestions = match$1[1];
  var match$2 = React.useState((function () {
          return "any";
        }));
  var setDifficulty = match$2[1];
  var difficulty = match$2[0];
  var match$3 = React.useState((function () {
          return "any";
        }));
  var setQuizType = match$3[1];
  var quizType = match$3[0];
  var match$4 = React.useState((function () {
          return false;
        }));
  var setShowQuestions = match$4[1];
  var quizContext = QuizContext$Savvy.useQuiz(/* () */0);
  var selectDiffultLevel = function (level) {
    return Curry._1(setDifficulty, (function (param) {
                  return level;
                }));
  };
  var setQuestionType = function (quizType) {
    return Curry._1(setQuizType, (function (param) {
                  return quizType;
                }));
  };
  var constructUrl = function (baseUrl) {
    if (difficulty !== "any" && quizType === "any") {
      return $$String.concat("&", /* :: */[
                  baseUrl,
                  /* :: */[
                    "difficulty=" + difficulty,
                    /* [] */0
                  ]
                ]);
    } else if (difficulty !== "any" && quizType !== "any") {
      return $$String.concat("&", /* :: */[
                  baseUrl,
                  /* :: */[
                    "difficulty=" + difficulty,
                    /* :: */[
                      "type=" + quizType,
                      /* [] */0
                    ]
                  ]
                ]);
    } else if (difficulty === "any" && quizType !== "any") {
      return $$String.concat("&", /* :: */[
                  baseUrl,
                  /* :: */[
                    "type=" + quizType,
                    /* [] */0
                  ]
                ]);
    } else {
      return baseUrl;
    }
  };
  var baseUrl = "https://opentdb.com/api.php?amount=" + (String(numberOfQuestions) + ("&category=" + (categoryId + ("&token=" + quizContext[/* token */0]))));
  var questionStream = MakeStream$Savvy.array(match$1[0]);
  return React.createElement("div", undefined, React.createElement("h1", undefined, title), React.createElement(Input$Savvy.make, {
                  value: String(numberOfQuestions),
                  onChange: (function ($$event) {
                      return Curry._1(setNumberOfQuestions, $$event.target.value);
                    }),
                  type_: "number",
                  isValid: true,
                  placeholder: "Number of questions",
                  required: true,
                  max: "50"
                }), React.createElement(Select$Savvy.make, {
                  options: /* :: */[
                    /* record */[
                      /* value */"any",
                      /* label */"Any"
                    ],
                    /* :: */[
                      /* record */[
                        /* value */"easy",
                        /* label */"Easy"
                      ],
                      /* :: */[
                        /* record */[
                          /* value */"medium",
                          /* label */"Medium"
                        ],
                        /* :: */[
                          /* record */[
                            /* value */"hard",
                            /* label */"Hard"
                          ],
                          /* [] */0
                        ]
                      ]
                    ]
                  ],
                  onChange: selectDiffultLevel
                }), React.createElement(Select$Savvy.make, {
                  options: /* :: */[
                    /* record */[
                      /* value */"any",
                      /* label */"Any"
                    ],
                    /* :: */[
                      /* record */[
                        /* value */"multiple",
                        /* label */"Multiple"
                      ],
                      /* :: */[
                        /* record */[
                          /* value */"boolean",
                          /* label */"Boolean"
                        ],
                        /* [] */0
                      ]
                    ]
                  ],
                  onChange: setQuestionType
                }), React.createElement(Button$Savvy.make, {
                  text: "Create Quiz",
                  type_: "button",
                  onClick: (function (param) {
                      fetch(constructUrl(baseUrl)).then((function (prim) {
                                return prim.json();
                              })).then((function (json) {
                              var categoryTypeResponse = APIDecode$Savvy.CategoryTypeResult.decode(json);
                              Curry._1(setQuestions, (function (param) {
                                      return categoryTypeResponse[/* results */1];
                                    }));
                              Curry._1(setShowQuestions, (function (param) {
                                      return true;
                                    }));
                              return Promise.resolve(/* () */0);
                            }));
                      return /* () */0;
                    }),
                  disabled: false
                }), match$4[0] ? React.createElement(Questions$Savvy.make, {
                    questionStream: questionStream
                  }) : null);
}

var make = QuizCategory;

export {
  make ,
  
}
/* react Not a pure module */
