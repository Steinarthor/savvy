// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Input$Savvy from "../components/Input/Input.bs.js";
import * as Button$Savvy from "../components/Button/Button.bs.js";
import * as Select$Savvy from "../components/Select/Select.bs.js";
import * as Network$Savvy from "../network/Network.bs.js";
import * as Questions$Savvy from "../components/Questions/Questions.bs.js";
import * as QuizContext$Savvy from "../context/QuizContext.bs.js";
import * as QuizCategoryStyles$Savvy from "./QuizCategoryStyles.bs.js";

function QuizCategory(Props) {
  var title = Props.title;
  var categoryId = Props.categoryId;
  var match = React.useState((function () {
          return false;
        }));
  var setShowQuestions = match[1];
  var quizContext = QuizContext$Savvy.useQuiz(/* () */0);
  var createQuiz = function (param) {
    Network$Savvy.fetchQuestions(quizContext[/* state */0][/* numberOfQuestions */3], categoryId, quizContext[/* state */0][/* token */0], quizContext[/* state */0][/* quizDifficulty */4], quizContext[/* state */0][/* quizType */5]).then((function (res) {
            Curry._1(quizContext[/* dispatch */1], /* SetQuestions */Block.__(3, [res[/* results */1]]));
            Curry._1(quizContext[/* dispatch */1], /* MakeStream */0);
            return Promise.resolve(/* () */0);
          }));
    return /* () */0;
  };
  var selectDiffultLevel = function (level) {
    return Curry._1(quizContext[/* dispatch */1], /* SetQuizDifficulty */Block.__(1, [level]));
  };
  var setQuestionType = function (quizType) {
    return Curry._1(quizContext[/* dispatch */1], /* SetQuizType */Block.__(2, [quizType]));
  };
  return React.createElement(React.Fragment, undefined, React.createElement("h1", undefined, title), React.createElement("div", {
                  className: QuizCategoryStyles$Savvy.quizCategory
                }, React.createElement(Input$Savvy.make, {
                      value: String(quizContext[/* state */0][/* numberOfQuestions */3]),
                      onChange: (function ($$event) {
                          return Curry._1(quizContext[/* dispatch */1], /* SetNumberOfQuestions */Block.__(0, [$$event.target.value]));
                        }),
                      type_: "number",
                      isValid: true,
                      placeholder: "Number of questions",
                      required: true,
                      max: "50"
                    }), React.createElement(Select$Savvy.make, {
                      options: /* :: */[
                        /* record */[
                          /* value */"any",
                          /* label */"Any"
                        ],
                        /* :: */[
                          /* record */[
                            /* value */"easy",
                            /* label */"Easy"
                          ],
                          /* :: */[
                            /* record */[
                              /* value */"medium",
                              /* label */"Medium"
                            ],
                            /* :: */[
                              /* record */[
                                /* value */"hard",
                                /* label */"Hard"
                              ],
                              /* [] */0
                            ]
                          ]
                        ]
                      ],
                      onChange: selectDiffultLevel
                    }), React.createElement(Select$Savvy.make, {
                      options: /* :: */[
                        /* record */[
                          /* value */"any",
                          /* label */"Any"
                        ],
                        /* :: */[
                          /* record */[
                            /* value */"multiple",
                            /* label */"Multiple"
                          ],
                          /* :: */[
                            /* record */[
                              /* value */"boolean",
                              /* label */"Boolean"
                            ],
                            /* [] */0
                          ]
                        ]
                      ],
                      onChange: setQuestionType
                    }), React.createElement(Button$Savvy.make, {
                      text: "Create Quiz",
                      type_: "button",
                      onClick: (function (param) {
                          createQuiz(/* () */0);
                          return Curry._1(setShowQuestions, (function (param) {
                                        return true;
                                      }));
                        }),
                      disabled: false
                    }), match[0] ? React.createElement(Questions$Savvy.make, { }) : null));
}

var make = QuizCategory;

export {
  make ,
  
}
/* react Not a pure module */
