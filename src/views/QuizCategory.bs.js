// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Input$Savvy from "../components/Input/Input.bs.js";
import * as Button$Savvy from "../components/Button/Button.bs.js";
import * as Select$Savvy from "../components/Select/Select.bs.js";
import * as Network$Savvy from "../network/Network.bs.js";
import * as Questions$Savvy from "../components/Questions/Questions.bs.js";
import * as MakeStream$Savvy from "../utils/MakeStream.bs.js";
import * as QuizContext$Savvy from "../context/QuizContext.bs.js";

var initialState_001 = /* questions : array */[];

var initialState = /* record */[
  /* numberOfQuestions */1,
  initialState_001,
  /* difficulty */"any",
  /* quizType */"any",
  /* showQuestions */false
];

function reducer(state, action) {
  switch (action.tag | 0) {
    case /* SetNumberOfQuestions */0 :
        return /* record */[
                /* numberOfQuestions */action[0],
                /* questions : array */[],
                /* difficulty */state[/* difficulty */2],
                /* quizType */state[/* quizType */3],
                /* showQuestions */state[/* showQuestions */4]
              ];
    case /* SetQuestions */1 :
        return /* record */[
                /* numberOfQuestions */state[/* numberOfQuestions */0],
                /* questions */action[0],
                /* difficulty */state[/* difficulty */2],
                /* quizType */state[/* quizType */3],
                /* showQuestions */state[/* showQuestions */4]
              ];
    case /* SetDifficulty */2 :
        return /* record */[
                /* numberOfQuestions */state[/* numberOfQuestions */0],
                /* questions */state[/* questions */1],
                /* difficulty */action[0],
                /* quizType */state[/* quizType */3],
                /* showQuestions */state[/* showQuestions */4]
              ];
    case /* SetQuizType */3 :
        return /* record */[
                /* numberOfQuestions */state[/* numberOfQuestions */0],
                /* questions */state[/* questions */1],
                /* difficulty */state[/* difficulty */2],
                /* quizType */action[0],
                /* showQuestions */state[/* showQuestions */4]
              ];
    case /* ShowQuestions */4 :
        return /* record */[
                /* numberOfQuestions */state[/* numberOfQuestions */0],
                /* questions */state[/* questions */1],
                /* difficulty */state[/* difficulty */2],
                /* quizType */state[/* quizType */3],
                /* showQuestions */action[0]
              ];
    case /* FetchQuestions */5 :
        var update = action[2];
        Network$Savvy.fetchQuestions(state[/* numberOfQuestions */0], action[0], action[1], state[/* difficulty */2], state[/* quizType */3]).then((function (res) {
                return Promise.resolve(Curry._1(update, res[/* results */1]));
              }));
        return state;
    
  }
}

function QuizCategory(Props) {
  var title = Props.title;
  var categoryId = Props.categoryId;
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  var updateQuestionState = function (questions) {
    Curry._1(dispatch, /* SetQuestions */Block.__(1, [questions]));
    return Curry._1(dispatch, /* ShowQuestions */Block.__(4, [true]));
  };
  var quizContext = QuizContext$Savvy.useQuiz(/* () */0);
  var selectDiffultLevel = function (level) {
    return Curry._1(dispatch, /* SetDifficulty */Block.__(2, [level]));
  };
  var setQuestionType = function (quizType) {
    return Curry._1(dispatch, /* SetQuizType */Block.__(3, [quizType]));
  };
  var questionStream = MakeStream$Savvy.array(state[/* questions */1]);
  var match$1 = state[/* showQuestions */4];
  return React.createElement("div", undefined, React.createElement("h1", undefined, title), React.createElement(Input$Savvy.make, {
                  value: String(state[/* numberOfQuestions */0]),
                  onChange: (function ($$event) {
                      return Curry._1(dispatch, /* SetNumberOfQuestions */Block.__(0, [$$event.target.value]));
                    }),
                  type_: "number",
                  isValid: true,
                  placeholder: "Number of questions",
                  required: true,
                  max: "50"
                }), React.createElement(Select$Savvy.make, {
                  options: /* :: */[
                    /* record */[
                      /* value */"any",
                      /* label */"Any"
                    ],
                    /* :: */[
                      /* record */[
                        /* value */"easy",
                        /* label */"Easy"
                      ],
                      /* :: */[
                        /* record */[
                          /* value */"medium",
                          /* label */"Medium"
                        ],
                        /* :: */[
                          /* record */[
                            /* value */"hard",
                            /* label */"Hard"
                          ],
                          /* [] */0
                        ]
                      ]
                    ]
                  ],
                  onChange: selectDiffultLevel
                }), React.createElement(Select$Savvy.make, {
                  options: /* :: */[
                    /* record */[
                      /* value */"any",
                      /* label */"Any"
                    ],
                    /* :: */[
                      /* record */[
                        /* value */"multiple",
                        /* label */"Multiple"
                      ],
                      /* :: */[
                        /* record */[
                          /* value */"boolean",
                          /* label */"Boolean"
                        ],
                        /* [] */0
                      ]
                    ]
                  ],
                  onChange: setQuestionType
                }), React.createElement(Button$Savvy.make, {
                  text: "Create Quiz",
                  type_: "button",
                  onClick: (function (param) {
                      return Curry._1(dispatch, /* FetchQuestions */Block.__(5, [
                                    categoryId,
                                    quizContext[/* token */0],
                                    updateQuestionState
                                  ]));
                    }),
                  disabled: false
                }), match$1 ? React.createElement(Questions$Savvy.make, {
                    questionStream: questionStream
                  }) : null);
}

var make = QuizCategory;

export {
  initialState ,
  reducer ,
  make ,
  
}
/* react Not a pure module */
